import React from 'react';
import { OverrideValues } from "./props";
declare const IKUpload: React.ForwardRefExoticComponent<Omit<Omit<import("prop-types").InferProps<{
    fileName: import("prop-types").Requireable<string>;
    tags: import("prop-types").Requireable<string[]>;
    useUniqueFileName: import("prop-types").Requireable<boolean>;
    responseFields: import("prop-types").Requireable<any[]>;
    isPrivateFile: import("prop-types").Requireable<boolean>;
    folder: import("prop-types").Requireable<string>;
    customCoordinates: import("prop-types").Requireable<string>;
    extensions: import("prop-types").Requireable<object[]>;
    webhookUrl: import("prop-types").Requireable<string>;
    overwriteFile: import("prop-types").Requireable<boolean>;
    overwriteAITags: import("prop-types").Requireable<boolean>;
    overwriteTags: import("prop-types").Requireable<boolean>;
    overwriteCustomMetadata: import("prop-types").Requireable<boolean>;
    customMetadata: import("prop-types").Requireable<import("prop-types").Requireable<object> | import("prop-types").Requireable<string>>;
    onError: import("prop-types").Requireable<(...args: any[]) => any>;
    onSuccess: import("prop-types").Requireable<(...args: any[]) => any>;
    onUploadStart: import("prop-types").Requireable<(...args: any[]) => any>;
    onUploadProgress: import("prop-types").Requireable<(...args: any[]) => any>;
    validateFile: import("prop-types").Requireable<(...args: any[]) => any>;
    ref: import("prop-types").Requireable<any>;
    transformation: import("prop-types").Requireable<object>;
    overrideParameters: import("prop-types").Requireable<(...args: any[]) => any>;
    checks: import("prop-types").Requireable<string>;
}>, "transformation" | "customMetadata"> & {
    useUniqueFileName?: boolean | undefined;
    tags?: string[] | undefined;
    folder?: string | undefined;
    isPrivateFile?: boolean | undefined;
    customCoordinates?: string | undefined;
    responseFields?: string[] | undefined;
    extensions?: import("./props").Extension | undefined;
    webhookUrl?: string | undefined;
    overwriteFile?: boolean | undefined;
    overwriteAITags?: boolean | undefined;
    overwriteTags?: boolean | undefined;
    overwriteCustomMetadata?: boolean | undefined;
    customMetadata?: string | Record<string, string | number | boolean | (string | number | boolean)[]> | undefined;
    onError?: ((err: Error) => void) | undefined;
    onSuccess?: ((res: import("imagekit-javascript/dist/src/interfaces").UploadResponse) => void) | undefined;
    onUploadStart?: ((evt: React.ChangeEvent<HTMLInputElement>) => void) | undefined;
    onUploadProgress?: ((evt: ProgressEvent<XMLHttpRequestEventTarget>) => void) | undefined;
    validateFile?: ((file: File) => boolean) | undefined;
    transformation?: {
        pre?: string | undefined;
        post?: ({
            type: "transformation";
            value: string;
        } | {
            type: "gif-to-video";
            value?: string | undefined;
        } | {
            type: "thumbnail";
            value?: string | undefined;
        } | {
            type: "abs";
            value: string;
            protocol: "hls" | "dash";
        })[] | undefined;
    } | undefined;
    overrideParameters?: ((file: File) => OverrideValues) | undefined;
    checks?: string | undefined;
} & React.InputHTMLAttributes<HTMLInputElement> & import("prop-types").InferPropsInner<Pick<{
    publicKey: import("prop-types").Requireable<string>;
    urlEndpoint: import("prop-types").Requireable<string>;
    authenticator: import("prop-types").Requireable<(...args: any[]) => any>;
}, never>> & Partial<import("prop-types").InferPropsInner<Pick<{
    publicKey: import("prop-types").Requireable<string>;
    urlEndpoint: import("prop-types").Requireable<string>;
    authenticator: import("prop-types").Requireable<(...args: any[]) => any>;
}, "urlEndpoint" | "publicKey" | "authenticator">>>, "ref"> & React.RefAttributes<HTMLInputElement>>;
export default IKUpload;
